// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.
/// <reference lib="webworker"/>
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
const manifest = self.__WB_MANIFEST;
console.log(manifest);
precacheAndRoute(manifest);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  console.log('Received the message in sw', event);
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('Called Skip waiting');
    self.skipWaiting();
  }
  if (event.data.type === 'navigate') {
    console.log('Inside navigate', event.data.url);
    self.clients.openWindow(event.data.url);
  }
  if (event.data.type === 'reload') {
    self.clients.matchAll().then((clients) => {
      clients.forEach((client) => {
        client.postMessage({
          type: 'navigate',
          url: event.data.url,
        });
      });
    });
  }
});

self.addEventListener('activate', (event) => {
  event.waitUntil(
    (async () => {
      if (self.registration.navigationPreload) {
        // Enable navigation preloads!
        await self.registration.navigationPreload.enable();
      }
    })()
  );
  event.waitUntil(
    self.clients.claim().then(() => {
      self.skipWaiting();
    })
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(fetch(event.request));

  if (event.request.mode === 'navigate') {
    event.waitUntil(
      self.clients.matchAll().then((clients) => {
        clients.forEach((client) => {
          if (client.type === 'window') {
            client.postMessage({
              type: 'navigate',
              url: event.request.url,
            });
          }
        });
      })
    );
  }
});

// Any other custom service worker logic can go here.
